#include "shell_functions.h"
#include "libshell.h"
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#define PROMPT "prompt"
#include <stdio.h>

/* A simple UNIX command interpreter (shell) 
   can execute arguments, free stuff, has 
   conditionals for env and exit; but seg faults
   when giving 'Enter' by itself to stdin :( */
int main(__attribute__((unused)) int ac, __attribute__((unused)) char **av, __attribute__((unused))char **env)
{
  char *input;
  char **exec_argv;
  int status;
  int parse_res;

  input = NULL;
  exec_argv = NULL;
  status = 0;
  parse_res = 1;
  
  while (parse_res != 0) { 
      print_prompt(PROMPT);
      parse_res = parse_input(input, exec_argv, env, status);

      /* if there is a critical issue reading input
	 or if child process has not ended
	 because the program to execute could not
         be found */
      if (parse_res < 0) {	
	return (1);
      }
  }
  
  return (0);
}

/* Function: read from stdin and execute a built-in
   function or call a child process accordingly */
int parse_input(char *input, char **exec_argv, char **env, int status)
{
  input = read_line(0); /* read a line from stdin */
  printf("test");
  /* if there was some error allocating the string */
  if (input == NULL) {
      /* hopefully the read_line function prints an 
	 appropriate error message */
      print_string("Failed to read input. Exiting shell.\n");
      return (-1);
    }
  exec_argv = string_split(input, ' ');
  /* if there was some error allocating the array */
  if (exec_argv == NULL) {
      /* hopefully the string_split function prints an 
	 appropriate error message */
      print_string("Ran out of memory. Exiting shell.\n");
      free(input);
      return (-1);
    }
  
  /* detect built-in functions */
  if (string_compare(exec_argv[0], "exit")) {
      print_string("Need to exit.\n");
      free_str_array(exec_argv);
      free(input);
      return (0);
    }
  else if (string_compare(exec_argv[0], "env")) {
      print_string("Need to print env variables.\n");
    }
  else {
    status = call_child(exec_argv, env);
    if (status < 0) {
      free(input);
      free_str_array(exec_argv);
      return (-2);
    }
    /* is there a way to store the value in status 
       in the env var "$?"? */
  }

  free(input);
  free_str_array(exec_argv);

  return (1);

}

/* Function: execute a program passed as an argument 
   in a child process */
int call_child(char **exec_argv, char **env)
{
  pid_t pid;
  int status;

  if ((pid = fork()) == -1) {
    perror("fork");
    return (-1);
  }
  if (pid == 0) {
    execve(exec_argv[0], exec_argv, env);
    perror(exec_argv[0]);
    return (-2);
  }
  else {
    wait(&status);
  }
  
   return status;
}

/* Function: print a prompt */
void print_prompt(char *s)
{
  print_string(s);
  print_char('$');
  print_char(' ');
}

/* Function: free an allocated arrray of allocated strings */
void free_str_array(char **str_array)
{
  int i;

  for (i = 0; str_array[i] != NULL; i++) {
    free(str_array[i]);
  }

  free(str_array);
}
